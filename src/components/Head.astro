---
import "../styles/global.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const {
  title = "Matthew Seccafien: Personal Site",
  description = "The personal site of Matthew Seccafien",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/assets/favicon.ico" />
<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return {
        theme: localStorage.getItem("theme"),
        mode: localStorage.getItem("mode"),
      };
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? {
          theme: "dark",
          mode: "mode-default",
        }
      : {
          theme: "light",
          mode: "mode-default",
        };
  };

  function setDarkMode(document) {
    const { theme, mode } = getThemePreference();
    document.documentElement.classList[theme === "dark" ? "add" : "remove"](
      "theme-dark"
    );
    document.documentElement.classList[
      mode === "contrast-high" ? "add" : "remove"
    ]("contrast-high");

    if (typeof localStorage !== "undefined") {
      // Watch the document element and persist user preference when it changes.
      const observer = new MutationObserver(() => {
        const isDark =
          document.documentElement.classList.contains("theme-dark");
        const isHighContrast =
          document.documentElement.classList.contains("contrast-high");

        localStorage.setItem("theme", isDark ? "dark" : "light");

        localStorage.setItem(
          "mode",
          isHighContrast ? "contrast-high" : "mode-default"
        );
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  }

  setDarkMode(document);

  document.addEventListener("astro:after-swap", (event) => {
    setDarkMode(event.target);
  });
</script>
