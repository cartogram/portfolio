---
import ThemeToggle from "./ThemeToggle.astro";
import Anchor from "./Anchor.astro";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Current", href: "/current/" },
  { label: "Past", href: "/past/" },
];

/** Test if a link is pointing to the current page. */
const isCurrentPage = (href: string) => {
  let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
  if (pathname.at(0) !== "/") pathname = "/" + pathname;
  if (pathname.at(-1) !== "/") pathname += "/";
  return pathname === href || (href !== "/" && pathname.startsWith(href));
};

const { title } = Astro.props;
---

<nav class="Nav Wrap" transition:persist>
  <h1 class="Title">
    <Anchor href="/" primary={title} />
  </h1>
  {
    [].length > 0 && (
      <ul class="Links">
        {textLinks.map(({ label, href }) => (
          <li>
            <Anchor
              isCurrent={isCurrentPage(href)}
              href={href}
              primary={label}
            />
          </li>
        ))}
      </ul>
    )
  }
  <div class="ThemeToggle">
    <ThemeToggle />
  </div>
</nav>

<style>
  .Nav {
    z-index: var(--z-index-3);
    display: grid;
    align-items: baseline;
    padding-bottom: 1rem;
    position: relative;
    top: 0;
    transition: opacity 0.2s ease-in-out;
    column-gap: 2rem;
    grid-template-columns: 1fr 1fr 1fr 1fr;
  }

  :global(.loaded) .Nav {
    opacity: 1;
  }

  .Nav {
    opacity: 0;
    transition: 0.3s ease-in-out;
    transition-delay: 0.3s;
    transition-property: opacity, transform;
  }

  :global(.loaded) .Nav {
    opacity: 1;
  }

  .Title {
    grid-area: 1 / 1 / 1 / 4;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
  }

  .Title__Text {
    background-color: var(--main-background-color);
  }

  .ThemeToggle {
    grid-area: 1 / 3 / 4 / 5;
  }

  @media (width > 1200px) {
    .Title {
      grid-area: 1 / 1 / 1 / 4;
    }

    .ThemeToggle {
      grid-area: 1 / 4 / 4 / 5;
    }
  }
</style>
