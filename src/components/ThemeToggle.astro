---

---

<theme-toggle>
  <button class="Switch">
    <span class="sr-only">Theme</span>
    <span class="Switch__Select"></span>
  </button>
</theme-toggle>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      const button = this.querySelector("button")!;

      /** Set the theme to dark/light mode. */
      const setTheme = (dark: boolean) => {
        document.documentElement.classList[dark ? "add" : "remove"](
          "theme-dark"
        );
        button.setAttribute("aria-pressed", String(dark));
      };

      // Toggle the theme when a user clicks the button.
      button.addEventListener("click", () => setTheme(!this.isDark()));

      // Initialize button state to reflect current theme.
      setTheme(this.isDark());
    }

    isDark() {
      return document.documentElement.classList.contains("theme-dark");
    }
  }
  customElements.define("theme-toggle", ThemeToggle);
</script>

<style>
  :global(.theme-dark) {
    --button-color: blue;
  }

  .Switch {
    background: var(--main-background-color);
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    margin: 0;
    cursor: pointer;
    gap: 1px;
    border-radius: 999rem;
    border: 1px solid var(--main-color);
    width: 2.5rem;
    height: 1.5rem;
    margin: 1rem;
  }

  .Switch__Select::before {
    content: "";
    z-index: 1;
    position: absolute;
    display: block;
    width: 1.5rem;
    height: 1.5rem;
    background-color: var(--main-color);
    border: 1px solid var(--main-color);
    border-radius: 999rem;
    left: -1px;
    top: -1px;
  }

  :global(.theme-dark) .Switch__Select::before {
    transform: translateX(75%);
  }

  @media (prefers-reduced-motion: no-preference) {
    .Switch__Select::before {
      transition:
        transform var(--global-transition),
        background-color var(--global-transition),
        color var(--global-transition);
    }
  }
</style>
