---
const letters = ["C", "A", "R", "T", "O", "G", "R", "A", "M"];
const min = 3;
const max = 15;
---

<cartogram-wordmark class="Wordmark">
  {
    letters.map((l) => (
      <div class="Track">
        {Array.from({
          length: Math.floor(Math.random() * (max - min + 1)) + min,
        }).map((_, i) => (
          <span style={`--index: ${max - i}`} class="Letter">
            {l}
          </span>
        ))}
      </div>
    ))
  }
</cartogram-wordmark>

<style>
  .Wordmark {
    position: fixed;
    z-index: var(--z-index-1);
    top: 0;
    right: 0;
    left: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-height: 100vh;
    width: 100vw;
    overflow: hidden;
    pointer-events: none;
  }

  .Wordmark {
    opacity: 0;
    transition: 0.05s ease-in-out;
    transition-property: opacity, transform;
  }

  :global(.loaded) .Wordmark {
    opacity: 1;
    transform: translateY(0);
  }

  .Track {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: var(--wordmark-background-color);
  }

  .Letter {
    position: absolute;
    font-size: 15vw;
    text-shadow:
      -1px -1px 0 var(--wordmark-color),
      1px -1px 0 var(--wordmark-color),
      -1px 1px 0 var(--wordmark-color),
      1px 1px 0 var(--wordmark-color);
    z-index: var(--index);
    cursor: pointer;
    transform: skewX(-18deg) skewY(-18deg) rotateZ(35deg);
  }

  .Letter:first-child {
    color: var(--wordmark-color);
  }
</style>

<script>
  import { animate, stagger } from "motion";

  class CartogramWordmark extends HTMLElement {
    constructor() {
      super();

      const size = {
        width: window.innerWidth,
        height: window.innerHeight,
      };

      const tracks = this.querySelectorAll(".Track");

      tracks.forEach((track) => {
        const height = this.randomNumber(0, size.height, 0.5);
        const letters = track.querySelectorAll(".Letter");
        // const easing = cubicBezier(0.05, 0.83, 0.56, 1);

        // track.addEventListener("mouseenter", () => {
        //   letters.forEach((letter, index) => {
        //     animate(
        //       letter,
        //       {
        //         y: [height + index * 10, height + index * 40],

        //         rotateZ: [35, 35],
        //         skewX: [-18, -18],
        //         skewY: [-18, -18],
        //       },
        //       {
        //         // delay: stagger(1),
        //         // duration: 10,
        //         // ease: easing,

        //         type: "spring",
        //         stiffness: 300,
        //         damping: 40,
        //         mass: 4,
        //         delay: index * 0.02,
        //       }
        //     );
        //   });
        // });

        // track.addEventListener("mouseleave", () => {
        //   console.log("mouseleave");
        //   letters.forEach((letter, index) => {
        //     animate(
        //       letter,
        //       {
        //         y: [height + index * 40, height + index * 10],

        //         rotateZ: [35, 35],
        //         skewX: [-18, -18],
        //         skewY: [-18, -18],
        //       },
        //       {
        //         // delay: stagger(1),
        //         // duration: 10,
        //         // ease: easing,

        //         type: "spring",
        //         stiffness: 300,
        //         damping: 40,
        //         mass: 4,
        //         delay: index * 0.02,
        //       }
        //     );
        //   });
        // });

        letters.forEach((letter, index) => {
          const offset = size.width > 950 ? index * 10 : index * 5;
          const y = height + offset;
          animate(
            letter,
            {
              y,
              rotateZ: [35, 35],
              skewX: [-18, -18],
              skewY: [-18, -18],
            },
            {
              type: "spring",
              stiffness: 300,
              damping: 40,
              mass: 4,
              delay: index * 0.02,
            }
          );
        });
      });
    }
    randomNumber(min: number, max: number, correction = 0) {
      return Math.floor((Math.random() - correction) * (max - min + 1)) + min;
    }

    isDark() {
      return document.documentElement.classList.contains("theme-dark");
    }
  }
  customElements.define("cartogram-wordmark", CartogramWordmark);
</script>
