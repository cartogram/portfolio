---
import Head from "../components/Head.astro";
import Nav from "../components/Nav.astro";
import Footer from "../components/Footer.astro";
import Wordmark from "../components/Wordmark.astro";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const { title, description } = Astro.props;
---

<html lang="en">
  <head>
    <Head
      title={`Matt Seccafien ${title ? `â€¢ ${title}` : ""}`}
      description={description}
    />
  </head>
  <body>
    <main class="Main">
      <Wordmark />
      <Nav title="Matt Seccafien" />

      <section class="Layout Wrap">
        <div class="Masthead">
          <slot name="masthead" />
        </div>
        <div class="Projects">
          <slot name="projects" />
        </div>
        <div class="Content">
          <slot name="content" />
        </div>
        <footer class="Footer">
          <Footer />
        </footer>
      </section>
    </main>

    <script>
      addEventListener("load", () =>
        document.documentElement.classList.add("loaded")
      );
    </script>
  </body>
</html>

<style>
  .Layout {
    width: 100%;
    min-height: 100vh;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-auto-rows: auto;
    grid-column-gap: 2rem;
    grid-row-gap: 3rem;
    grid-template-areas:
      "masthead masthead masthead masthead"
      "projects projects projects projects"
      "content content content content"
      "footer footer footer footer";
    z-index: var(--z-index-2);
    position: relative;
  }

  @media (width > 950px) {
    .Layout {
      grid-template-areas:
        "masthead masthead masthead ."
        ". . projects projects"
        "content content content content"
        "footer footer . .";
    }
  }

  @media (width > 1100px) {
    .Layout {
      grid-template-areas:
        "masthead masthead . ."
        ". . projects projects"
        "content content content content"
        "footer footer . .";
    }
  }

  .Layout {
    opacity: 0;
    transform: translateY(1rem);
    transition: 0.3s ease-in-out;
    transition-delay: 0.3s;
    transition-property: opacity, transform;
  }

  :global(.loaded) .Layout {
    opacity: 1;
    transform: translateY(0);
  }

  .Masthead {
    grid-area: masthead;
  }

  .Footer {
    grid-area: footer;
  }

  .Projects {
    grid-area: projects;
  }

  .Sub {
    grid-area: sub;
  }

  .Content {
    grid-area: content;

    p {
      max-width: 40ch;
    }
  }
</style>
