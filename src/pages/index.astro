---
import {getCollection} from 'astro:content'
import {Image} from 'astro:assets'

import me1 from '../images/me-1.jpg'
import me3 from '../images/me-3.jpg'

import Layout from '../layouts/Layout.astro'
import Anchor from '../components/Anchor.astro'
import Run from '../components/Runs.astro'
import Speaking from '../components/Speaking.astro'

const professionalLinks: {
  label: string
  href: string
}[] = [
  {
    label: 'Say hello',
    href: 'mailto:mseccafien@gmail.com',
  },
  {
    label: 'GitHub',
    href: 'https://github.com/cartogram',
  },
  {
    label: 'View résumé',
    href: '/assets/Matthew Seccafien-CV-2025.pdf',
  },
  {
    label: 'LinkedIn',
    href: 'https://www.linkedin.com/in/mattseccafien/',
  },
]

const projects = (await getCollection('work'))
  .filter((project) => project.data.published)
  .sort((a, b) => b.data.publishDate!.valueOf() - a.data.publishDate!.valueOf())
  .slice(0, 5)

const currentProjects = projects.filter((project) => project.data.tags.includes('Current'))

const pastProjects = projects.filter((project) => project.data.tags.includes('Past'))
---

<Layout title="Cartogram">
  <div slot="masthead">
    <h2>
      Berlin-based designer and developer,<br />
      builder of user interfaces and systems.<br />
    </h2>

    <ul class="List">
      {
        professionalLinks.map(({label, href}) => (
          <li>
            <Anchor href={href} primary={label} />
          </li>
        ))
      }
    </ul>
  </div>
  <ul class="List" slot="projects">
    <li class="">
      <h3>Current</h3>
      <ul class="Projects">
        {
          currentProjects.map((project) => (
            <li>
              <Anchor
                href={project.data.published ? [project.collection, project.id].join('/') : (project.data.url ?? '#')}
                primary={project.data.title}
                secondary={project.data.type}
              />
            </li>
          ))
        }
      </ul>
    </li>
    <li class="">
      <h3>Past</h3>
      <ul class="Projects">
        {
          pastProjects.map((project) => (
            <li>
              <Anchor
                href={project.data.published ? [project.collection, project.id].join('/') : (project.data.url ?? '#')}
                primary={project.data.title}
                secondary={project.data.type}
              />
            </li>
          ))
        }
      </ul>
    </li>
  </ul>
  <div class="ContentLayout" slot="content">
    <div class="ImageContainer">
      <Image class="Image" src={me1} alt="Matthew Seccafien and his black cat Otto standing in his Berlin apartment." />
      <Image class="Image" src={me3} alt="Matthew Seccafien running in the Berlin Marathon 2023." />
      <div>
        <small>Follow via <a href="https://instagram.com/cartogram">Instagram</a></small><br />
        <Run />
      </div>
    </div>
    <div class="ContentContainer">
      <h3>About me</h3>
      <p>
        In the 20 years since studying in my homeland of <a href="/toronto">Canada</a>, I've held a variety of
        professional roles, starting out in traditional print, typography and information design, to site resiliency
        engineering, to open-source React framework development, and I'm currently interested in design system
        operations.
      </p>
      <p>
        I value creativity and autonomy in both life and work, and thrive when I am invested in the whole idea rather
        than any single facet.
      </p>
      <p>
        When not at my computer I can be found <a
          target="_blank"
          rel="noopener noreferrer"
          href="https://www.strava.com/athletes/59501199">running</a
        > around Templehofer Feld in <a href="/berlin">Berlin</a>, at the <a
          href="https://letterboxd.com/cartogram/"
          target="_blank"
          rel="noopener noreferrer">kino</a
        > or hanging out with my partner <a target="_blank" rel="noopener noreferrer" href="https://www.fimcd.ca/"
          >Fiona</a
        > and our cat Otto (pictured).
      </p>

      <Speaking />
    </div>
    <div class="ContentContainer"></div>
  </div>

  <style>
    .ContentLayout {
      display: grid;
      grid-template-columns: 1fr;
      grid-column-gap: 2rem;
    }

    .ImageContainer {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      grid-template-rows: repeat(4, 1fr);
    }

    @media (width > 950px) {
      .ImageContainer {
        padding-right: 4rem;
      }
      .ContentLayout {
        grid-template-columns: 1fr 1fr;
      }
    }

    .Image {
      position: relative;
      grid-column: 1 / 4;
      grid-row: 1 / 4;
      z-index: 1;
      box-shadow: var(--shadow-1);
    }

    .Image:nth-child(2) {
      grid-column: 3 / 5;
      grid-row: 3 / 5;
      z-index: 0;
    }

    .ImageContainer div {
      grid-column: 1 / 5;
      grid-row: 4 / 5;
    }
  </style>
</Layout>
