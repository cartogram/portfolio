---
import { type CollectionEntry, getCollection } from "astro:content";

import Layout from "../../layouts/Layout.astro";
import Anchor from "../../components/Anchor.astro";
import Dash from "../../components/Dash.astro";
import { render } from "astro:content";

interface Props {
  entry: CollectionEntry<"work">;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  const work = await getCollection("work");
  return work.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;

const { Content } = await render(entry);
---

<Layout title={entry.data.title} description={entry.data.description}>
  <Fragment slot="masthead">
    <h1>
      <Anchor
        href="/work"
        primary={entry.data.title}
        secondary={entry.data.type}
      />
    </h1>
    <h2>{entry.data.description}</h2>

    <ul>
      {
        entry.data.roles && (
          <li>
            <h3>Roles</h3>
            <div style="display: flex">
              {entry.data.roles?.map((role, index) => (
                <>
                  {index > 0 && <Dash />}
                  {role}
                </>
              ))}
            </div>
          </li>
        )
      }
    </ul>
    <ul>
      {
        entry.data.collaborators && (
          <li>
            <h3>Collaborators</h3>
            <ul>
              {entry.data.collaborators?.map((collaborator) => (
                <li>
                  <Anchor
                    href={collaborator.url ?? ""}
                    primary={collaborator.name}
                    secondary={collaborator.role}
                  />
                </li>
              ))}
            </ul>
          </li>
        )
      }
    </ul>

    <aside class="Meta">
      <small
        >{
          entry.data.publishDate.toLocaleDateString("en-US", {
            year: "numeric",
            month: "short",
          })
        }</small
      >

      <Dash />
      {
        entry.data.tags.map((tag, index) => (
          <>
            {index > 0 && <Dash />}
            <small>{tag}</small>
          </>
        ))
      }
      {
        entry.data.url && (
          <>
            <Dash isFullWidth />
            <small>View</small>
            <Dash />
            <small>
              <Anchor
                href={entry.data.url}
                primary={entry.data.url.replace("https://www.", "")}
              />
            </small>
          </>
        )
      }
    </aside>

    <Fragment slot="projects"> </Fragment>

    <div class="content" slot="content">
      <Content />
    </div>

    <style>
      .content :global(h1),
      .content :global(h2),
      .content :global(h3),
      .content :global(h4),
      .content :global(h5) {
        margin: 0;
      }

      .Meta {
        position: relative;
        display: flex;
        width: 100%;
        align-items: center;
        gap: 1px;
        padding: 2.25rem 0;
      }
    </style>
  </Fragment>
</Layout>
