---
import { type CollectionEntry, getCollection } from "astro:content";

import Layout from "../../layouts/Layout.astro";
import Anchor from "../../components/Anchor.astro";
import Dash from "../../components/Dash.astro";
import { render } from "astro:content";

interface Props {
  entry: CollectionEntry<"work">;
}

type Heading = {
  slug: string;
  text: string;
};

export async function getStaticPaths() {
  const work = await getCollection("work");
  return work.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;

const { Content, headings } = await render(entry);
---

<Layout
  title={entry.data.title}
  description={entry.data.description}
  layout="single"
  color={entry.data.color}
>
  <Fragment slot="masthead">
    <div class="flex">
      <h1>
        <Anchor
          href="/"
          primary={entry.data.title}
          secondary={entry.data.type}
        />
      </h1>
      <Anchor accesskey="x" href="/" primary="Close" />
    </div>
    <h2>{entry.data.description}</h2>

    <aside class="Meta">
      <small
        >{
          entry.data.publishDate.toLocaleDateString("en-US", {
            year: "numeric",
            month: "short",
          })
        }</small
      >

      <Dash />
      {
        entry.data.tags.map((tag, index) => (
          <>
            {index > 0 && <Dash />}
            <small>{tag}</small>
          </>
        ))
      }
      <Dash isFullWidth />
    </aside>

    <ul class="flex">
      {
        entry.data.roles && (
          <li style="flex:1">
            <h3>Roles</h3>
            {entry.data.roles?.map((role, index) => (
              <>
                {index > 0 && <Dash />}
                {role}
              </>
            ))}
          </li>
        )
      }
      {
        entry.data.url && (
          <li>
            <h3>View</h3>
            <Anchor
              href={entry.data.url}
              primary={entry.data.url.replace("https://www.", "").split("/")[0]}
            />
          </li>
        )
      }
    </ul>
    <ul>
      {
        entry.data.collaborators && (
          <li>
            <h3>Collaborators</h3>
            <ul>
              {entry.data.collaborators?.map((collaborator) => (
                <li>
                  <Anchor
                    wrap
                    href={collaborator.url ?? ""}
                    primary={collaborator.name}
                    secondary={collaborator.role}
                  />
                </li>
              ))}
            </ul>
          </li>
        )
      }
    </ul>
  </Fragment>

  {
    headings.length > 0 && (
      <Fragment slot="chapters">
        <h3>Chapters</h3>
        <ul>
          {(entry.rendered?.metadata?.headings as Heading[])
            .filter((heading) => heading.slug !== "footnote-label")
            .map((heading, index) => (
              <li>
                <Anchor
                  href={`#${heading.slug}`}
                  primary={String(index + 1)}
                  secondary={heading.text}
                />
              </li>
            ))}
        </ul>
      </Fragment>
    )
  }

  {
    entry.data.video && (
      <Fragment slot="hero">
        <div class="Video">
          <video
            autoplay
            loop
            muted
            playsinline
            src={`/assets/${entry.id}.mp4`}
          />
        </div>
      </Fragment>
    )
  }

  <div class="content" slot="content">
    <Content />
    {
      entry.data.media && (
        <div class="Media">
          <h3>Media</h3>
          {entry.data.media.map((media) => (
            <>
              <figure class="Media__Item">
                {media.type === "video" && (
                  <video
                    autoplay
                    loop
                    muted
                    playsinline
                    src={`/assets/${media.src}`}
                  />
                )}
                {media.type === "image" && (
                  <img src={`/assets/${media.src}`} alt={media.alt} />
                )}
              </figure>
              <p>
                <small>{media.alt}</small>
              </p>
            </>
          ))}
        </div>
      )
    }
  </div>

  <style>
    .content {
      padding-top: 2rem;
    }

    .content :global(h2):not(:first-child) {
      margin: 0;
      padding: 4rem 0 1rem;
    }

    .Meta {
      position: relative;
      display: flex;
      width: 100%;
      align-items: center;
      gap: 1px;
      padding: 1rem 0rem;
    }

    .flex {
      display: flex;
      align-items: baseline;
    }

    .flex *:first-child {
      flex: 1;
    }

    .Video {
      max-width: 100vw;
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 1rem;
      border: 1px solid;
      overflow: hidden;
      box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.1);
      background-color: var(--main-background-color);
    }

    .Video video {
      display: block;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .Media {
      padding-top: 2rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .Media__Item {
      max-width: 100vw;
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 1rem;
      border: 1px solid;
      overflow: hidden;
      box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.1);

      max-width: 80ch;
    }

    .Media__Item video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .Media__Item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }
  </style>
</Layout>
